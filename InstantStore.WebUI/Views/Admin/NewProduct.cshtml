@using System.Collections;
@using InstantStore.WebUI.ViewModels;
@using InstantStore.WebUI.Resources;
@model InstantStore.WebUI.ViewModels.ProductViewModel
@{
    ViewBag.Title = StringResource.admin_ProductNew;
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

<h2>@ViewBag.Title</h2>

<script src="//tinymce.cachefly.net/4.1/tinymce.min.js"></script>
<script src="~/Scripts/jquery-ui-1.9.2.custom.min.js"></script>
<script src="~/Scripts/jquery.fileupload.js"></script>

<style>
    .image-container img{
        width:100px;
        height:100px;
        display:inline-block;
        float:left;
    }
</style>
<div class="border col-sm-3">
    @Html.ActionLink(StringResource.admin_Back, "Pages", null, new { @class = "btn btn-block btn-primary" })
    <h3>@StringResource.admin_AddToParent </h3>
    @Html.Partial("CategoryTree", this.ViewData["CategoryTreeRootViewModel"] as CategoryTreeItemViewModel)
</div>
<div class="border col-sm-9">

    <div class="col-sm-10 col-sm-offset-1">
        @using (Html.BeginForm("NewProduct", "Admin", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            <div class="">
                <div class="form-group">
                    <div class="form-inline checkbox-inline">
                        @Html.CheckBoxFor(model => model.IsAvailable)
                        @Html.LabelFor(model => model.IsAvailable)
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="">
                    <div class="form-inline">
                        @Html.LabelFor(model => model.CurrencyId)
                        @Html.DropDownListFor(model => model.CurrencyId, this.Model.Currencies, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Images)
                <div style="height:120px" id="image_container">
                    @if (!this.Model.Images.Any())
                    {
                        <span id="no-image">No images. Press add image button to add new image.</span>
                    }
                    else
                    {
                        foreach (var image in this.Model.Images)
                        {
                            @Html.Partial("ProductImage", image.ToString())
                        }
                    }
                </div>
                <a id="upload-image-btn" class="btn btn-default">@StringResource.admin_ProductAddImage</a>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label" })
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control parent-category-name" })
            </div>
            <div class="form-group">
                @Html.HiddenFor(model => model.ParentCategoryId, new { @class = "parent-category-id" })
                <input type="submit" value="@StringResource.admin_Save" class="btn btn-lg btn-primary" />
            </div>
        }
        <div class="hide">
            @using (Html.BeginForm("SaveImage", "Admin"))
            {
                <input type="file" id="upload-image" name="image" />
            }
        </div>
    </div>
</div>
    <script>
        tinymce.init({
            selector: 'textarea',
            plugins: [
                "advlist autolink lists link image charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars",
                "insertdatetime nonbreaking save table contextmenu directionality",
                "emoticons paste textcolor colorpicker textpattern"
            ],
            toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | forecolor backcolor emoticons",
        });

        $(function () {

            var appendImage = function (imgId) {
                $.ajax({
                    url: "/admin/productimage?imageId=" + imgId,

                })
                .done(function (html) {
                    $("#no-image").remove();
                    $("#image_container").append(html);
                });
            };

            $("#upload-image").fileupload({
                url: '/admin/saveimage',
                dataType: 'json',
                add: function (e, data) {
                    data.submit()
                        .done(function (data) {
                            appendImage(data.ImageId);
                        })
                        .fail(function (jqXHR, result, textStatus) {
                            alert("Error:" + textStatus);
                        });
                }
            })
            .prop('disabled', !$.support.fileInput)
            .parent().addClass($.support.fileInput ? undefined : 'disabled');

            $("#upload-image-btn").click(function () {
                $("#upload-image").click();
            });

            $(document).on("category-tree:selected", function (event, id) {
                $("#ParentCategoryId").val(id);
            });

        });
    </script>


